{"version":3,"sources":["components/Todos/Todos.js","store/index.js","App.js","reportWebVitals.js","index.js"],"names":["Todos","props","React","useEffect","editInput","useRef","handleCompleteTodo","id","state_key_where_todo_is","completeTodo","handleEditTodo","editTodo","handleUnEditTodo","unEditTodo","handleTrashTodo","trashTodo","handleDeleteTodo","deleteTodo","handleUncompleteTodo","uncompleteTodo","handleDynamicProps","eval","drilled","props_to_map","handleDynamicHandlers","action","upperFirstLetter","handleOnBlurInput","evnt","todo_id","current","value","length","handleOnTodoChange","val","updateTodoOnChange","str","charAt","toUpperCase","slice","Fragment","_","isEmpty","title","map","item","className","isEditing","autoFocus","onBlur","onChange","e","target","ref","type","description","placeholder","actions","onClick","mapStateToProps","state","mapDispatchToProps","addTodo","connect","dynamic_actions","all","actions_1","actions_2","actions_3","createNotification","NotificationManager","info","success","warning","error","alert","ADD_TODO","COMPLETE_TODO","EDIT_TODO","UNEDIT_TODO","UPDATE_TODO_ON_CHANGE","TRASH_TODO","DELETE_TODO","UNCOMPLETE_TODO","todo","payload","add_to_another_key_in_state__action","currentKey","additional_properties","filter","find","change_in_current_key_a_todo","initalState","todos","trash","completed_todos","loading","middleware","thunk","store","createStore","console","log","Math","floor","random","completed","history","createdAt","Date","toJSON","replace","composeWithDevTools","applyMiddleware","task","sanitizeString","string","trim","inputValue","handleAddTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f3268f0.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './Todos.module.scss';\nimport _ from 'underscore';\n\n// REDUX\nimport {connect} from 'react-redux';\n// STORE\nimport {\n  // Global variables\n  addTodo, \n  completeTodo, \n  editTodo,\n  unEditTodo,\n  trashTodo, \n  deleteTodo,\n  uncompleteTodo,\n  updateTodoOnChange,\n} from '../../store';\n\nconst Todos = (props) => {\n\n  /**\n  * Handlers\n  */\n\n  React.useEffect(()=>{\n    // Component did mount\n  }, []);\n\n  const editInput = React.useRef('');\n\n  const handleCompleteTodo = (id, state_key_where_todo_is) => {\n    props.completeTodo(id, state_key_where_todo_is);\n  }//END handleCompleteTodo\n\n  const handleEditTodo = (id, state_key_where_todo_is) => {\n    props.editTodo(id, state_key_where_todo_is);\n  }//END handleCompleteTodo\n\n  const handleUnEditTodo = (id, state_key_where_todo_is) => {\n    props.unEditTodo(id, state_key_where_todo_is);\n  }//END handleCompleteTodo\n  \n  const handleTrashTodo = (id, state_key_where_todo_is) => {\n    props.trashTodo(id, state_key_where_todo_is);\n  }//END handleTrashTodo\n\n  const handleDeleteTodo = (id, state_key_where_todo_is) => {\n    props.deleteTodo(id, state_key_where_todo_is);\n  }\n\n  const handleUncompleteTodo = (id, state_key_where_todo_is) => {\n    props.uncompleteTodo(id, state_key_where_todo_is);\n  }\n\n\n  const handleDynamicProps = () => {\n    return eval(`props.${props.drilled.props_to_map}`); \n  }\n\n  const handleDynamicHandlers = (action) => {\n    return eval(`handle${upperFirstLetter(action)}Todo`); \n  }\n\n  const handleOnBlurInput = (evnt, todo_id, state_key_where_todo_is) => {\n    // if the value is less then the required then stay focus on this input \n    let editedInputVal = editInput.current.value;\n    if(editInput.current.value.length < 1){\n      // show error notification\n      // stay focus on this input / maybe put the value to the revious value\n    } else {\n    // if the value is passing the required validations then save the edited todo in the store\n      props.unEditTodo(todo_id, state_key_where_todo_is);\n    }\n  }\n\n  const handleOnTodoChange = (val, todo_id, state_key_where_todo_is) => {\n    props.updateTodoOnChange(todo_id, state_key_where_todo_is, val);\n  }\n  /**\n   * Helpers\n   */\n  const upperFirstLetter = (str)=> str.charAt(0).toUpperCase() + str.slice(1);\n\n\n  /**\n   * JSX\n   */\n  return (\n    <React.Fragment>\n      {\n        _.isEmpty(handleDynamicProps())\n        ?\n        <h6>{props.drilled.title + ' Empty'}</h6>\n        :\n        <React.Fragment>\n          <h6>{props.drilled.title}</h6>\n          {handleDynamicProps().map((item)=>(\n            <div className=\"input-group mb-3\" key={item.id}>\n              { item.isEditing ? \n                <input \n                  autoFocus \n                  onBlur={(evnt)=>handleOnBlurInput(evnt, item.id, props.drilled.props_to_map)}\n                  onChange={e => handleOnTodoChange(e.target.value, item.id, props.drilled.props_to_map)}\n                  ref={editInput} \n                  type=\"text\" \n                  className=\"form-control\" \n                  value={item.description} \n                  placeholder={item.description} />\n              :\n                <div className=\"form-control text-left\">{item.description}</div>\n              }\n              <div className=\"input-group-append\">\n                {props.drilled.actions.map(action=>(\n                  <button \n                  // complete the task by the to do id\n                  onClick={()=>eval(handleDynamicHandlers(action))(item.id, props.drilled.props_to_map)}\n                  className=\"btn btn-outline-success\" \n                  type=\"button\">\n                    {upperFirstLetter(action)}\n                  </button>\n                ))}{/* END Dynamic actions */}\n              </div>\n            </div>\n          ))}{/* END Dynamic Props */}\n        </React.Fragment>\n      }\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = (state) => (state);\n\nconst mapDispatchToProps = {\n  addTodo,\n  completeTodo,\n  editTodo,\n  unEditTodo,\n  updateTodoOnChange,\n  trashTodo,\n  deleteTodo,\n  uncompleteTodo\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n","import {createStore, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {NotificationManager} from 'react-notifications';\r\n\r\n// Global variables\r\nexport const dynamic_actions = {\r\n    all: ['complete', 'edit', 'trash', 'uncomplete', 'delete'],\r\n    actions_1: ['complete', 'edit', 'trash'],\r\n    actions_2: ['uncomplete', 'edit', 'trash'],\r\n    actions_3: ['uncomplete', 'edit', 'delete'],\r\n}\r\n\r\n  // Reference: https://www.npmjs.com/package/react-notifications\r\nexport const createNotification = (type) => {\r\n    return () => {\r\n    switch (type) {\r\n        case 'info':\r\n        NotificationManager.info('Info message');\r\n        break;\r\n        case 'success':\r\n        NotificationManager.success('Success', 'Task Added');\r\n        break;\r\n        case 'complete':\r\n        NotificationManager.success('Success', 'Task Completed');\r\n        break;\r\n        case 'trash':\r\n        NotificationManager.success('Success', 'Task Trashed');\r\n        break;\r\n        case 'edited':\r\n        NotificationManager.success('Success', 'Task Updated');\r\n        break;\r\n        case 'warning':\r\n        NotificationManager.warning('At least 1 letter is required', 'Warning', 1500);\r\n        break;\r\n        case 'delete':\r\n        NotificationManager.warning('Task Deleted');\r\n        break;\r\n        case 'error':\r\n        NotificationManager.error('Error message', 'Click me!', 5000, () => {\r\n            alert('callback');\r\n        });\r\n        break;\r\n        default:\r\n            NotificationManager.error('Error message', 'Click me!', 5000, () => {\r\n            alert('callback');\r\n            });\r\n        break;\r\n    }//END switch\r\n    };//returned annonymos function\r\n};//END createNotification\r\n\r\n\r\n// Actions:\r\nconst ADD_TODO = 'ADD_TODO';\r\nconst COMPLETE_TODO = 'COMPLETE_TODO';\r\nconst EDIT_TODO = 'EDIT_TODO';\r\nconst UNEDIT_TODO = 'UNEDIT_TODO';\r\nconst UPDATE_TODO_ON_CHANGE = 'UPDATE_TODO_ON_CHANGE';\r\nconst TRASH_TODO = 'TRASH_TODO';\r\nconst DELETE_TODO = 'DELETE_TODO';\r\nconst UNCOMPLETE_TODO = 'UNCOMPLETE_TODO';\r\n\r\n// Actions Creators:\r\nexport const addTodo = (todo)=> {\r\n    createNotification('success')();\r\n    return {\r\n        type: ADD_TODO,\r\n        payload: todo\r\n    }\r\n}\r\n\r\nexport const completeTodo = (id, state_key_where_todo_is)=> {\r\n    createNotification('complete')();\r\n    return {\r\n        type: COMPLETE_TODO,\r\n        payload: {\r\n            id,\r\n            state_key_where_todo_is\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTodo = (id, state_key_where_todo_is)=> {\r\n    return {\r\n        type: EDIT_TODO,\r\n        payload: {\r\n            id,\r\n            state_key_where_todo_is\r\n        }\r\n    }\r\n}\r\n\r\nexport const unEditTodo = (id, state_key_where_todo_is)=> {\r\n    createNotification('edited')();\r\n    return {\r\n        type: UNEDIT_TODO,\r\n        payload: {\r\n            id,\r\n            state_key_where_todo_is\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteTodo = (id, state_key_where_todo_is)=> {\r\n    createNotification('delete')();\r\n    return {\r\n        type: DELETE_TODO,\r\n        payload: {\r\n            id,\r\n            state_key_where_todo_is\r\n        }\r\n    }\r\n}\r\n\r\nexport const trashTodo = (id, state_key_where_todo_is)=> {\r\n    createNotification('trash')();\r\n    return {\r\n        type: TRASH_TODO,\r\n        payload: {\r\n            id,\r\n            state_key_where_todo_is\r\n        }\r\n    }\r\n}\r\n\r\nexport const uncompleteTodo = (id, state_key_where_todo_is)=> {\r\n    return {\r\n        type: UNCOMPLETE_TODO,\r\n        payload: {\r\n            id,\r\n            state_key_where_todo_is\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTodoOnChange = (id, state_key_where_todo_is, description)=> {\r\n    return {\r\n        type: UPDATE_TODO_ON_CHANGE,\r\n        payload: {\r\n            id,\r\n            state_key_where_todo_is,\r\n            description\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * single todo Model object:\r\n * {\r\n *  id: Number\r\n *  description: String,\r\n *  history: Array,\r\n *  completed: Bolean,\r\n *  isEditing: Bolean\r\n * }\r\n */\r\n\r\n /**\r\n  * Refactored reducer code.. \r\n  */\r\n function add_to_another_key_in_state__action(state, action, currentKey, additional_properties = null){\r\n    // refactored action that repeated itself\r\n    if (additional_properties) {\r\n        return {\r\n            ...state,\r\n            [action.payload.state_key_where_todo_is]: [\r\n                ...state[action.payload.state_key_where_todo_is].filter(todo=>todo.id!==action.payload.id)\r\n            ],\r\n            [currentKey]: [\r\n                ...state[currentKey], \r\n                {\r\n                    ...state[action.payload.state_key_where_todo_is].find(todo=>todo.id===action.payload.id),\r\n                    ...additional_properties\r\n                }\r\n            ],\r\n        }        \r\n    } else {\r\n        return {\r\n            ...state,\r\n            // save in trash the deleted tasks\r\n            [action.payload.state_key_where_todo_is]: [\r\n                ...state[action.payload.state_key_where_todo_is].filter(todo=>todo.id!==action.payload.id)\r\n            ],\r\n            [currentKey]: [\r\n                ...state[currentKey], \r\n                state[action.payload.state_key_where_todo_is].find(todo=>todo.id===action.payload.id),\r\n            ],\r\n        }        \r\n    }\r\n}\r\n\r\nfunction change_in_current_key_a_todo(state, action, currentKey, additional_properties = null) {\r\n    \r\n    if (additional_properties) {\r\n        return {\r\n            ...state,\r\n            [action.payload.state_key_where_todo_is]: [\r\n                ...state[action.payload.state_key_where_todo_is].filter(todo=>todo.id!==action.payload.id),\r\n                // find the todo where the user is trying to edit\r\n                {\r\n                    ...state[action.payload.state_key_where_todo_is].find(todo=>todo.id===action.payload.id),\r\n                    ...additional_properties\r\n                }\r\n            ]\r\n        }\r\n    } else {\r\n        return {\r\n            ...state,\r\n            [action.payload.state_key_where_todo_is]: [\r\n                ...state[action.payload.state_key_where_todo_is].filter(todo=>todo.id!==action.payload.id),\r\n                // find the todo where the user is trying to edit\r\n                {\r\n                    ...state[action.payload.state_key_where_todo_is].find(todo=>todo.id===action.payload.id),\r\n                }\r\n            ]\r\n        }\r\n    }\r\n} \r\n\r\n\r\n/**\r\n * Initial State\r\n */\r\nconst initalState = {\r\n    todos:[],\r\n    trash: [],\r\n    completed_todos: [],\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nfunction rootReducer(state = initalState, action){\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            console.log('STORE: acion.type===ADD_TODO')\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, {\r\n                    id: Math.floor(Math.random() * 100),\r\n                    description: action.payload,\r\n                    completed: false,\r\n                    isEditing: false,\r\n                    history: [],\r\n                    createdAt: new Date().toJSON().slice(0,10).replace(/-/g,'/'),\r\n                }],\r\n                error: null\r\n            }\r\n\r\n        case COMPLETE_TODO:\r\n            console.log('STORE: acion.type===COMPLETE_TODO')\r\n            return add_to_another_key_in_state__action(state, action, 'completed_todos', {completed: true});\r\n        \r\n        case EDIT_TODO:\r\n            return change_in_current_key_a_todo(state, action, action.payload.state_key_where_todo_is, {isEditing: true})\r\n\r\n        case UNEDIT_TODO:\r\n            return change_in_current_key_a_todo(\r\n                state, \r\n                action, \r\n                action.payload.state_key_where_todo_is, \r\n                {isEditing: false}\r\n            )\r\n\r\n        case UPDATE_TODO_ON_CHANGE:\r\n            console.log('Store: UPDATE_TODO_ON_CHANGE action:', action)\r\n            return change_in_current_key_a_todo(\r\n                state, \r\n                action, \r\n                action.payload.state_key_where_todo_is, \r\n                {description: action.payload.description}\r\n            )\r\n\r\n        case TRASH_TODO:\r\n            console.log('STORE: acion.type===TRASH_TODO')\r\n            console.log('STORE: state_key_where_todo_is', action.payload.state_key_where_todo_is, state[action.payload.state_key_where_todo_is])\r\n            return add_to_another_key_in_state__action(state, action, 'trash');\r\n\r\n        case DELETE_TODO:\r\n            console.log('STORE: acion.type===DELETE_TODO')\r\n            return {\r\n                ...state,\r\n                // save in trash the deleted tasks\r\n                trash: [...state.trash, state.todos.find(todo=>todo.id===action.payload.id)],\r\n                [action.payload.state_key_where_todo_is]: [\r\n                    ...state[action.payload.state_key_where_todo_is].filter(todo=>todo.id!==action.payload.id),\r\n                ],\r\n            }\r\n\r\n        case UNCOMPLETE_TODO:\r\n            console.log('STORE: acion.type===UNCOMPLETE_TODO')\r\n            console.log('STORE:state[action.payload.state_key_where_todo_is]', state[action.payload.state_key_where_todo_is])\r\n            return {\r\n                ...state,\r\n                // remove the todo from the current key that he is right now\r\n                // add him to the \"todos\" key\r\n                todos: [\r\n                    ...state.todos,\r\n                    state[action.payload.state_key_where_todo_is].find(todo=>todo.id===action.payload.id)\r\n                ],\r\n                [action.payload.state_key_where_todo_is]: [\r\n                    ...state[action.payload.state_key_where_todo_is].filter(todo=>todo.id!==action.payload.id)\r\n                ],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nexport const store = createStore(rootReducer, initalState, composeWithDevTools(applyMiddleware(...middleware)))","// REACT\nimport React from 'react';\n// External Packages\nimport _ from 'underscore';\nimport {NotificationContainer} from 'react-notifications';\n\n// CSS\nimport './App.scss';\n// REDUX\nimport {connect} from 'react-redux';\n// STORE\nimport {\n  // global variables\n  dynamic_actions,\n  addTodo, \n  completeTodo, \n  trashTodo, \n  deleteTodo,\n  createNotification\n} from './store';\n\n// EXTERNAL COMPONENTS\nimport Todos from './components/Todos/Todos';\n\n// CURRENT COMPONENT\nfunction App(props) {\n  // Variables\n  const task = React.useRef('');\n\n  // component did mount\n  React.useEffect(()=>{\n    console.log('props changed', props)\n  },[props]);\n\n  const handleAddTodo = () => {\n    // get the input value\n    const inputValue = task.current.value; \n    // store the value in the store\n    // add a todo ony if the value is greater than 1\n    if (inputValue.length >= 1) {\n      // reset the add task text\n      task.current.value = '';\n      // add to store the task\n      props.addTodo(sanitizeString(inputValue));\n    } else {\n      // do something if the value is less than 1\n      // show a notification\n      createNotification('warning')();\n    }\n  }//END handleAddTodo\n\n  /**\n   * Helpers\n   */\n  const sanitizeString = (string) => {\n    return string.trim();\n  }\n\n\n\n  /**\n   * JSX\n   */\n  return (\n    <div className=\"App\">\n      <NotificationContainer/>\n      <header className=\"App-header container\">\n        <h3>To Do</h3>\n        {/* ADD TODO */}\n        <div className=\"input-group mb-5\">\n          {/* Add new Task */}\n          <input\n          // onChange={(evnt)=>handleChange(evnt)} \n          ref={task} \n          type=\"text\" \n          className=\"form-control\" \n          placeholder=\"Add new task\" \n          />\n          <div className=\"input-group-append\">\n            <button\n            onClick={()=>handleAddTodo()}\n            className=\"btn btn-outline-primary\" \n            type=\"button\">\n              Add task\n            </button>\n          </div>\n        </div>\n\n        {/* Didnt add a to do yet.. */}\n        {\n          _.isEmpty(props.todos) \n            && \n          _.isEmpty(props.completed_todos) \n            && \n          _.isEmpty(props.trash) \n            ?\n            <h6>Your Tasks empty :)</h6>\n            :\n            <React.Fragment>\n              {/* TODOS */}\n              <Todos drilled={({\n                title: 'Your Todos',\n                props_to_map: 'todos',\n                actions: [...dynamic_actions.actions_1]\n              })} />\n              {/* COMPLETED TODOS */}\n              <Todos drilled={({\n                title: 'Completed Todos',\n                props_to_map: 'completed_todos',\n                actions: [...dynamic_actions.actions_2]\n              })} />\n              {/* TRASHED TODOS */}\n              <Todos drilled={({\n                title: 'Trashed Todos',\n                props_to_map: 'trash',\n                actions: [...dynamic_actions.actions_3]\n              })} />\n            </React.Fragment>\n        }{/* END Looping through ttodos */}\n      </header>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => (state)\nconst mapDispatchToProps = {\n  addTodo,\n  completeTodo,\n  trashTodo,\n  deleteTodo\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// REDUX\nimport {Provider} from 'react-redux';\nimport {store} from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}